// Code generated by MockGen. DO NOT EDIT.
// Source: token/repository.go

// Package mock_tokenService is a generated GoMock package.
package mock_tokenService

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hryt430/Yotei+/internal/modules/auth/domain"
)

// MockITokenRepository is a mock of ITokenRepository interface.
type MockITokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITokenRepositoryMockRecorder
}

// MockITokenRepositoryMockRecorder is the mock recorder for MockITokenRepository.
type MockITokenRepositoryMockRecorder struct {
	mock *MockITokenRepository
}

// NewMockITokenRepository creates a new mock instance.
func NewMockITokenRepository(ctrl *gomock.Controller) *MockITokenRepository {
	mock := &MockITokenRepository{ctrl: ctrl}
	mock.recorder = &MockITokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenRepository) EXPECT() *MockITokenRepositoryMockRecorder {
	return m.recorder
}

// DeleteExpiredRefreshTokens mocks base method.
func (m *MockITokenRepository) DeleteExpiredRefreshTokens() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredRefreshTokens")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredRefreshTokens indicates an expected call of DeleteExpiredRefreshTokens.
func (mr *MockITokenRepositoryMockRecorder) DeleteExpiredRefreshTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredRefreshTokens", reflect.TypeOf((*MockITokenRepository)(nil).DeleteExpiredRefreshTokens))
}

// FindRefreshToken mocks base method.
func (m *MockITokenRepository) FindRefreshToken(token string) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshToken", token)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshToken indicates an expected call of FindRefreshToken.
func (mr *MockITokenRepositoryMockRecorder) FindRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshToken", reflect.TypeOf((*MockITokenRepository)(nil).FindRefreshToken), token)
}

// IsTokenBlacklisted mocks base method.
func (m *MockITokenRepository) IsTokenBlacklisted(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockITokenRepositoryMockRecorder) IsTokenBlacklisted(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockITokenRepository)(nil).IsTokenBlacklisted), token)
}

// RevokeRefreshToken mocks base method.
func (m *MockITokenRepository) RevokeRefreshToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockITokenRepositoryMockRecorder) RevokeRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockITokenRepository)(nil).RevokeRefreshToken), token)
}

// SaveRefreshToken mocks base method.
func (m *MockITokenRepository) SaveRefreshToken(token *domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockITokenRepositoryMockRecorder) SaveRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockITokenRepository)(nil).SaveRefreshToken), token)
}

// SaveTokenToBlacklist mocks base method.
func (m *MockITokenRepository) SaveTokenToBlacklist(token string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTokenToBlacklist", token, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTokenToBlacklist indicates an expected call of SaveTokenToBlacklist.
func (mr *MockITokenRepositoryMockRecorder) SaveTokenToBlacklist(token, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTokenToBlacklist", reflect.TypeOf((*MockITokenRepository)(nil).SaveTokenToBlacklist), token, ttl)
}
