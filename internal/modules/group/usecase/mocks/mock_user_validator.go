// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hryt430/Yotei+/internal/common/domain (interfaces: UserValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hryt430/Yotei+/internal/common/domain"
)

// MockUserValidator is a mock of UserValidator interface.
type MockUserValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUserValidatorMockRecorder
}

// MockUserValidatorMockRecorder is the mock recorder for MockUserValidator.
type MockUserValidatorMockRecorder struct {
	mock *MockUserValidator
}

// NewMockUserValidator creates a new mock instance.
func NewMockUserValidator(ctrl *gomock.Controller) *MockUserValidator {
	mock := &MockUserValidator{ctrl: ctrl}
	mock.recorder = &MockUserValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserValidator) EXPECT() *MockUserValidatorMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserValidator) GetUserInfo(arg0 context.Context, arg1 string) (*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserValidatorMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserValidator)(nil).GetUserInfo), arg0, arg1)
}

// GetUsersInfoBatch mocks base method.
func (m *MockUserValidator) GetUsersInfoBatch(arg0 context.Context, arg1 []string) (map[string]*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInfoBatch", arg0, arg1)
	ret0, _ := ret[0].(map[string]*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInfoBatch indicates an expected call of GetUsersInfoBatch.
func (mr *MockUserValidatorMockRecorder) GetUsersInfoBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInfoBatch", reflect.TypeOf((*MockUserValidator)(nil).GetUsersInfoBatch), arg0, arg1)
}

// UserExists mocks base method.
func (m *MockUserValidator) UserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserValidatorMockRecorder) UserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserValidator)(nil).UserExists), arg0, arg1)
}
