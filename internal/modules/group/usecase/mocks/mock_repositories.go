// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hryt430/Yotei+/internal/modules/group/usecase (interfaces: GroupRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/hryt430/Yotei+/internal/common/domain"
	domain0 "github.com/hryt430/Yotei+/internal/modules/group/domain"
)


// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockGroupRepository) AddMember(arg0 context.Context, arg1 *domain0.GroupMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockGroupRepositoryMockRecorder) AddMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockGroupRepository)(nil).AddMember), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockGroupRepository) CreateGroup(arg0 context.Context, arg1 *domain0.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupRepositoryMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupRepository)(nil).CreateGroup), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockGroupRepository) DeleteGroup(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupRepositoryMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupRepository)(nil).DeleteGroup), arg0, arg1)
}

// GetGroupByID mocks base method.
func (m *MockGroupRepository) GetGroupByID(arg0 context.Context, arg1 uuid.UUID) (*domain0.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", arg0, arg1)
	ret0, _ := ret[0].(*domain0.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockGroupRepositoryMockRecorder) GetGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockGroupRepository)(nil).GetGroupByID), arg0, arg1)
}

// GetGroupStats mocks base method.
func (m *MockGroupRepository) GetGroupStats(arg0 context.Context, arg1 uuid.UUID) (*domain0.GroupStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupStats", arg0, arg1)
	ret0, _ := ret[0].(*domain0.GroupStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupStats indicates an expected call of GetGroupStats.
func (mr *MockGroupRepositoryMockRecorder) GetGroupStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupStats", reflect.TypeOf((*MockGroupRepository)(nil).GetGroupStats), arg0, arg1)
}

// GetMember mocks base method.
func (m *MockGroupRepository) GetMember(arg0 context.Context, arg1, arg2 uuid.UUID) (*domain0.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain0.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockGroupRepositoryMockRecorder) GetMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockGroupRepository)(nil).GetMember), arg0, arg1, arg2)
}

// GetMemberCount mocks base method.
func (m *MockGroupRepository) GetMemberCount(arg0 context.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCount indicates an expected call of GetMemberCount.
func (mr *MockGroupRepositoryMockRecorder) GetMemberCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCount", reflect.TypeOf((*MockGroupRepository)(nil).GetMemberCount), arg0, arg1)
}

// GetMemberRole mocks base method.
func (m *MockGroupRepository) GetMemberRole(arg0 context.Context, arg1, arg2 uuid.UUID) (domain0.MemberRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain0.MemberRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberRole indicates an expected call of GetMemberRole.
func (mr *MockGroupRepositoryMockRecorder) GetMemberRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberRole", reflect.TypeOf((*MockGroupRepository)(nil).GetMemberRole), arg0, arg1, arg2)
}

// IsMember mocks base method.
func (m *MockGroupRepository) IsMember(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMember indicates an expected call of IsMember.
func (mr *MockGroupRepositoryMockRecorder) IsMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockGroupRepository)(nil).IsMember), arg0, arg1, arg2)
}

// ListGroupsByMember mocks base method.
func (m *MockGroupRepository) ListGroupsByMember(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Group, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsByMember", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Group)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupsByMember indicates an expected call of ListGroupsByMember.
func (mr *MockGroupRepositoryMockRecorder) ListGroupsByMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsByMember", reflect.TypeOf((*MockGroupRepository)(nil).ListGroupsByMember), arg0, arg1, arg2)
}

// ListGroupsByOwner mocks base method.
func (m *MockGroupRepository) ListGroupsByOwner(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Group, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsByOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Group)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupsByOwner indicates an expected call of ListGroupsByOwner.
func (mr *MockGroupRepositoryMockRecorder) ListGroupsByOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsByOwner", reflect.TypeOf((*MockGroupRepository)(nil).ListGroupsByOwner), arg0, arg1, arg2)
}

// ListMembers mocks base method.
func (m *MockGroupRepository) ListMembers(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockGroupRepositoryMockRecorder) ListMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockGroupRepository)(nil).ListMembers), arg0, arg1, arg2)
}

// RemoveMember mocks base method.
func (m *MockGroupRepository) RemoveMember(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockGroupRepositoryMockRecorder) RemoveMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockGroupRepository)(nil).RemoveMember), arg0, arg1, arg2)
}

// SearchGroups mocks base method.
func (m *MockGroupRepository) SearchGroups(arg0 context.Context, arg1 string, arg2 *domain0.GroupType, arg3 domain.Pagination) ([]*domain0.Group, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGroups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*domain0.Group)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchGroups indicates an expected call of SearchGroups.
func (mr *MockGroupRepositoryMockRecorder) SearchGroups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroups", reflect.TypeOf((*MockGroupRepository)(nil).SearchGroups), arg0, arg1, arg2, arg3)
}

// UpdateGroup mocks base method.
func (m *MockGroupRepository) UpdateGroup(arg0 context.Context, arg1 *domain0.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupRepositoryMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupRepository)(nil).UpdateGroup), arg0, arg1)
}

// UpdateMemberRole mocks base method.
func (m *MockGroupRepository) UpdateMemberRole(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 domain0.MemberRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberRole indicates an expected call of UpdateMemberRole.
func (mr *MockGroupRepositoryMockRecorder) UpdateMemberRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberRole", reflect.TypeOf((*MockGroupRepository)(nil).UpdateMemberRole), arg0, arg1, arg2, arg3)
}
