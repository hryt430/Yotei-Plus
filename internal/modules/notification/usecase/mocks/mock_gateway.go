// Code generated by MockGen. DO NOT EDIT.
// Source: output/notification_output.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	output "github.com/hryt430/Yotei+/internal/modules/notification/usecase/output"
)

// MockNotificationGateway is a mock of NotificationGateway interface.
type MockNotificationGateway struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationGatewayMockRecorder
}

// MockNotificationGatewayMockRecorder is the mock recorder for MockNotificationGateway.
type MockNotificationGatewayMockRecorder struct {
	mock *MockNotificationGateway
}

// NewMockNotificationGateway creates a new mock instance.
func NewMockNotificationGateway(ctrl *gomock.Controller) *MockNotificationGateway {
	mock := &MockNotificationGateway{ctrl: ctrl}
	mock.recorder = &MockNotificationGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationGateway) EXPECT() *MockNotificationGatewayMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockNotificationGateway) SendNotification(ctx context.Context, userID, title, message string, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, userID, title, message, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationGatewayMockRecorder) SendNotification(ctx, userID, title, message, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationGateway)(nil).SendNotification), ctx, userID, title, message, metadata)
}

// MockAppNotificationGateway is a mock of AppNotificationGateway interface.
type MockAppNotificationGateway struct {
	ctrl     *gomock.Controller
	recorder *MockAppNotificationGatewayMockRecorder
}

// MockAppNotificationGatewayMockRecorder is the mock recorder for MockAppNotificationGateway.
type MockAppNotificationGatewayMockRecorder struct {
	mock *MockAppNotificationGateway
}

// NewMockAppNotificationGateway creates a new mock instance.
func NewMockAppNotificationGateway(ctrl *gomock.Controller) *MockAppNotificationGateway {
	mock := &MockAppNotificationGateway{ctrl: ctrl}
	mock.recorder = &MockAppNotificationGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppNotificationGateway) EXPECT() *MockAppNotificationGatewayMockRecorder {
	return m.recorder
}

// GetUnreadCount mocks base method.
func (m *MockAppNotificationGateway) GetUnreadCount(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCount", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCount indicates an expected call of GetUnreadCount.
func (mr *MockAppNotificationGatewayMockRecorder) GetUnreadCount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCount", reflect.TypeOf((*MockAppNotificationGateway)(nil).GetUnreadCount), ctx, userID)
}

// MarkAsRead mocks base method.
func (m *MockAppNotificationGateway) MarkAsRead(ctx context.Context, notificationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", ctx, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockAppNotificationGatewayMockRecorder) MarkAsRead(ctx, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockAppNotificationGateway)(nil).MarkAsRead), ctx, notificationID)
}

// SendNotification mocks base method.
func (m *MockAppNotificationGateway) SendNotification(ctx context.Context, userID, title, message string, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, userID, title, message, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockAppNotificationGatewayMockRecorder) SendNotification(ctx, userID, title, message, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockAppNotificationGateway)(nil).SendNotification), ctx, userID, title, message, metadata)
}

// MockLineNotificationGateway is a mock of LineNotificationGateway interface.
type MockLineNotificationGateway struct {
	ctrl     *gomock.Controller
	recorder *MockLineNotificationGatewayMockRecorder
}

// MockLineNotificationGatewayMockRecorder is the mock recorder for MockLineNotificationGateway.
type MockLineNotificationGatewayMockRecorder struct {
	mock *MockLineNotificationGateway
}

// NewMockLineNotificationGateway creates a new mock instance.
func NewMockLineNotificationGateway(ctrl *gomock.Controller) *MockLineNotificationGateway {
	mock := &MockLineNotificationGateway{ctrl: ctrl}
	mock.recorder = &MockLineNotificationGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineNotificationGateway) EXPECT() *MockLineNotificationGatewayMockRecorder {
	return m.recorder
}

// SendLineNotification mocks base method.
func (m *MockLineNotificationGateway) SendLineNotification(ctx context.Context, lineUserID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLineNotification", ctx, lineUserID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLineNotification indicates an expected call of SendLineNotification.
func (mr *MockLineNotificationGatewayMockRecorder) SendLineNotification(ctx, lineUserID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLineNotification", reflect.TypeOf((*MockLineNotificationGateway)(nil).SendLineNotification), ctx, lineUserID, message)
}

// SendNotification mocks base method.
func (m *MockLineNotificationGateway) SendNotification(ctx context.Context, userID, title, message string, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, userID, title, message, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockLineNotificationGatewayMockRecorder) SendNotification(ctx, userID, title, message, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockLineNotificationGateway)(nil).SendNotification), ctx, userID, title, message, metadata)
}

// MockWebhookOutput is a mock of WebhookOutput interface.
type MockWebhookOutput struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookOutputMockRecorder
}

// MockWebhookOutputMockRecorder is the mock recorder for MockWebhookOutput.
type MockWebhookOutputMockRecorder struct {
	mock *MockWebhookOutput
}

// NewMockWebhookOutput creates a new mock instance.
func NewMockWebhookOutput(ctrl *gomock.Controller) *MockWebhookOutput {
	mock := &MockWebhookOutput{ctrl: ctrl}
	mock.recorder = &MockWebhookOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookOutput) EXPECT() *MockWebhookOutputMockRecorder {
	return m.recorder
}

// SendWebhook mocks base method.
func (m *MockWebhookOutput) SendWebhook(ctx context.Context, event output.WebhookEvent, payload interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhook", ctx, event, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhook indicates an expected call of SendWebhook.
func (mr *MockWebhookOutputMockRecorder) SendWebhook(ctx, event, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhook", reflect.TypeOf((*MockWebhookOutput)(nil).SendWebhook), ctx, event, payload)
}
