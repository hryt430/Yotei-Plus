// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/notification_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hryt430/Yotei+/internal/modules/notification/domain"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CountByUserIDAndStatus mocks base method.
func (m *MockNotificationRepository) CountByUserIDAndStatus(ctx context.Context, userID string, status domain.NotificationStatus) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByUserIDAndStatus", ctx, userID, status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByUserIDAndStatus indicates an expected call of CountByUserIDAndStatus.
func (mr *MockNotificationRepositoryMockRecorder) CountByUserIDAndStatus(ctx, userID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByUserIDAndStatus", reflect.TypeOf((*MockNotificationRepository)(nil).CountByUserIDAndStatus), ctx, userID, status)
}

// FindByID mocks base method.
func (m *MockNotificationRepository) FindByID(ctx context.Context, id string) (*domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNotificationRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNotificationRepository)(nil).FindByID), ctx, id)
}

// FindByUserID mocks base method.
func (m *MockNotificationRepository) FindByUserID(ctx context.Context, userID string, limit, offset int) ([]*domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockNotificationRepositoryMockRecorder) FindByUserID(ctx, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockNotificationRepository)(nil).FindByUserID), ctx, userID, limit, offset)
}

// FindPendingNotifications mocks base method.
func (m *MockNotificationRepository) FindPendingNotifications(ctx context.Context, limit int) ([]*domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendingNotifications", ctx, limit)
	ret0, _ := ret[0].([]*domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendingNotifications indicates an expected call of FindPendingNotifications.
func (mr *MockNotificationRepositoryMockRecorder) FindPendingNotifications(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendingNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).FindPendingNotifications), ctx, limit)
}

// Save mocks base method.
func (m *MockNotificationRepository) Save(ctx context.Context, notification *domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotificationRepositoryMockRecorder) Save(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotificationRepository)(nil).Save), ctx, notification)
}

// UpdateStatus mocks base method.
func (m *MockNotificationRepository) UpdateStatus(ctx context.Context, id string, status domain.NotificationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNotificationRepositoryMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNotificationRepository)(nil).UpdateStatus), ctx, id, status)
}
