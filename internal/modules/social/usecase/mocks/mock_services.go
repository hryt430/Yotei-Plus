// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hryt430/Yotei+/internal/modules/social/usecase (interfaces: SocialEventPublisher,URLGateway)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/hryt430/Yotei+/internal/modules/social/domain"
)

// MockSocialEventPublisher is a mock of SocialEventPublisher interface.
type MockSocialEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockSocialEventPublisherMockRecorder
}

// MockSocialEventPublisherMockRecorder is the mock recorder for MockSocialEventPublisher.
type MockSocialEventPublisherMockRecorder struct {
	mock *MockSocialEventPublisher
}

// NewMockSocialEventPublisher creates a new mock instance.
func NewMockSocialEventPublisher(ctrl *gomock.Controller) *MockSocialEventPublisher {
	mock := &MockSocialEventPublisher{ctrl: ctrl}
	mock.recorder = &MockSocialEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocialEventPublisher) EXPECT() *MockSocialEventPublisherMockRecorder {
	return m.recorder
}

// PublishFriendRemoved mocks base method.
func (m *MockSocialEventPublisher) PublishFriendRemoved(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFriendRemoved", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFriendRemoved indicates an expected call of PublishFriendRemoved.
func (mr *MockSocialEventPublisherMockRecorder) PublishFriendRemoved(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFriendRemoved", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishFriendRemoved), arg0, arg1, arg2)
}

// PublishFriendRequestAccepted mocks base method.
func (m *MockSocialEventPublisher) PublishFriendRequestAccepted(arg0 context.Context, arg1 *domain.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFriendRequestAccepted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFriendRequestAccepted indicates an expected call of PublishFriendRequestAccepted.
func (mr *MockSocialEventPublisherMockRecorder) PublishFriendRequestAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFriendRequestAccepted", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishFriendRequestAccepted), arg0, arg1)
}

// PublishFriendRequestDeclined mocks base method.
func (m *MockSocialEventPublisher) PublishFriendRequestDeclined(arg0 context.Context, arg1 *domain.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFriendRequestDeclined", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFriendRequestDeclined indicates an expected call of PublishFriendRequestDeclined.
func (mr *MockSocialEventPublisherMockRecorder) PublishFriendRequestDeclined(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFriendRequestDeclined", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishFriendRequestDeclined), arg0, arg1)
}

// PublishFriendRequestSent mocks base method.
func (m *MockSocialEventPublisher) PublishFriendRequestSent(arg0 context.Context, arg1 *domain.Friendship, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFriendRequestSent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFriendRequestSent indicates an expected call of PublishFriendRequestSent.
func (mr *MockSocialEventPublisherMockRecorder) PublishFriendRequestSent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFriendRequestSent", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishFriendRequestSent), arg0, arg1, arg2)
}

// PublishInvitationAccepted mocks base method.
func (m *MockSocialEventPublisher) PublishInvitationAccepted(arg0 context.Context, arg1 *domain.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishInvitationAccepted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishInvitationAccepted indicates an expected call of PublishInvitationAccepted.
func (mr *MockSocialEventPublisherMockRecorder) PublishInvitationAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishInvitationAccepted", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishInvitationAccepted), arg0, arg1)
}

// PublishInvitationCreated mocks base method.
func (m *MockSocialEventPublisher) PublishInvitationCreated(arg0 context.Context, arg1 *domain.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishInvitationCreated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishInvitationCreated indicates an expected call of PublishInvitationCreated.
func (mr *MockSocialEventPublisherMockRecorder) PublishInvitationCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishInvitationCreated", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishInvitationCreated), arg0, arg1)
}

// PublishInvitationDeclined mocks base method.
func (m *MockSocialEventPublisher) PublishInvitationDeclined(arg0 context.Context, arg1 *domain.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishInvitationDeclined", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishInvitationDeclined indicates an expected call of PublishInvitationDeclined.
func (mr *MockSocialEventPublisherMockRecorder) PublishInvitationDeclined(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishInvitationDeclined", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishInvitationDeclined), arg0, arg1)
}

// PublishUserBlocked mocks base method.
func (m *MockSocialEventPublisher) PublishUserBlocked(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishUserBlocked", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishUserBlocked indicates an expected call of PublishUserBlocked.
func (mr *MockSocialEventPublisherMockRecorder) PublishUserBlocked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishUserBlocked", reflect.TypeOf((*MockSocialEventPublisher)(nil).PublishUserBlocked), arg0, arg1, arg2)
}

// MockURLGateway is a mock of URLGateway interface.
type MockURLGateway struct {
	ctrl     *gomock.Controller
	recorder *MockURLGatewayMockRecorder
}

// MockURLGatewayMockRecorder is the mock recorder for MockURLGateway.
type MockURLGatewayMockRecorder struct {
	mock *MockURLGateway
}

// NewMockURLGateway creates a new mock instance.
func NewMockURLGateway(ctrl *gomock.Controller) *MockURLGateway {
	mock := &MockURLGateway{ctrl: ctrl}
	mock.recorder = &MockURLGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLGateway) EXPECT() *MockURLGatewayMockRecorder {
	return m.recorder
}

// GenerateInviteURL mocks base method.
func (m *MockURLGateway) GenerateInviteURL(arg0 context.Context, arg1 uuid.UUID, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInviteURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateInviteURL indicates an expected call of GenerateInviteURL.
func (mr *MockURLGatewayMockRecorder) GenerateInviteURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInviteURL", reflect.TypeOf((*MockURLGateway)(nil).GenerateInviteURL), arg0, arg1, arg2)
}
