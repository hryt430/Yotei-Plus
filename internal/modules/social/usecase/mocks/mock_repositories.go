// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hryt430/Yotei+/internal/modules/social/usecase (interfaces: FriendshipRepository,InvitationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/hryt430/Yotei+/internal/common/domain"
	domain0 "github.com/hryt430/Yotei+/internal/modules/social/domain"
)

// MockFriendshipRepository is a mock of FriendshipRepository interface.
type MockFriendshipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipRepositoryMockRecorder
}

// MockFriendshipRepositoryMockRecorder is the mock recorder for MockFriendshipRepository.
type MockFriendshipRepositoryMockRecorder struct {
	mock *MockFriendshipRepository
}

// NewMockFriendshipRepository creates a new mock instance.
func NewMockFriendshipRepository(ctrl *gomock.Controller) *MockFriendshipRepository {
	mock := &MockFriendshipRepository{ctrl: ctrl}
	mock.recorder = &MockFriendshipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipRepository) EXPECT() *MockFriendshipRepositoryMockRecorder {
	return m.recorder
}

// AreFriends mocks base method.
func (m *MockFriendshipRepository) AreFriends(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreFriends", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AreFriends indicates an expected call of AreFriends.
func (mr *MockFriendshipRepositoryMockRecorder) AreFriends(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreFriends", reflect.TypeOf((*MockFriendshipRepository)(nil).AreFriends), arg0, arg1, arg2)
}

// CreateFriendship mocks base method.
func (m *MockFriendshipRepository) CreateFriendship(arg0 context.Context, arg1 *domain0.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriendship indicates an expected call of CreateFriendship.
func (mr *MockFriendshipRepositoryMockRecorder) CreateFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendship", reflect.TypeOf((*MockFriendshipRepository)(nil).CreateFriendship), arg0, arg1)
}

// DeleteFriendship mocks base method.
func (m *MockFriendshipRepository) DeleteFriendship(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendship", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriendship indicates an expected call of DeleteFriendship.
func (mr *MockFriendshipRepositoryMockRecorder) DeleteFriendship(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendship", reflect.TypeOf((*MockFriendshipRepository)(nil).DeleteFriendship), arg0, arg1, arg2)
}

// GetFriendCount mocks base method.
func (m *MockFriendshipRepository) GetFriendCount(arg0 context.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendCount indicates an expected call of GetFriendCount.
func (mr *MockFriendshipRepositoryMockRecorder) GetFriendCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendCount", reflect.TypeOf((*MockFriendshipRepository)(nil).GetFriendCount), arg0, arg1)
}

// GetFriends mocks base method.
func (m *MockFriendshipRepository) GetFriends(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendshipRepositoryMockRecorder) GetFriends(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriendshipRepository)(nil).GetFriends), arg0, arg1, arg2)
}

// GetFriendship mocks base method.
func (m *MockFriendshipRepository) GetFriendship(arg0 context.Context, arg1, arg2 uuid.UUID) (*domain0.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendship", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain0.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendship indicates an expected call of GetFriendship.
func (mr *MockFriendshipRepositoryMockRecorder) GetFriendship(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendship", reflect.TypeOf((*MockFriendshipRepository)(nil).GetFriendship), arg0, arg1, arg2)
}

// GetMutualFriends mocks base method.
func (m *MockFriendshipRepository) GetMutualFriends(arg0 context.Context, arg1, arg2 uuid.UUID) ([]*domain0.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMutualFriends", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMutualFriends indicates an expected call of GetMutualFriends.
func (mr *MockFriendshipRepositoryMockRecorder) GetMutualFriends(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMutualFriends", reflect.TypeOf((*MockFriendshipRepository)(nil).GetMutualFriends), arg0, arg1, arg2)
}

// GetPendingRequests mocks base method.
func (m *MockFriendshipRepository) GetPendingRequests(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingRequests", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingRequests indicates an expected call of GetPendingRequests.
func (mr *MockFriendshipRepositoryMockRecorder) GetPendingRequests(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingRequests", reflect.TypeOf((*MockFriendshipRepository)(nil).GetPendingRequests), arg0, arg1, arg2)
}

// GetSentRequests mocks base method.
func (m *MockFriendshipRepository) GetSentRequests(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentRequests", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentRequests indicates an expected call of GetSentRequests.
func (mr *MockFriendshipRepositoryMockRecorder) GetSentRequests(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentRequests", reflect.TypeOf((*MockFriendshipRepository)(nil).GetSentRequests), arg0, arg1, arg2)
}

// IsBlocked mocks base method.
func (m *MockFriendshipRepository) IsBlocked(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockFriendshipRepositoryMockRecorder) IsBlocked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockFriendshipRepository)(nil).IsBlocked), arg0, arg1, arg2)
}

// UpdateFriendship mocks base method.
func (m *MockFriendshipRepository) UpdateFriendship(arg0 context.Context, arg1 *domain0.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendship indicates an expected call of UpdateFriendship.
func (mr *MockFriendshipRepositoryMockRecorder) UpdateFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendship", reflect.TypeOf((*MockFriendshipRepository)(nil).UpdateFriendship), arg0, arg1)
}

// MockInvitationRepository is a mock of InvitationRepository interface.
type MockInvitationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationRepositoryMockRecorder
}

// MockInvitationRepositoryMockRecorder is the mock recorder for MockInvitationRepository.
type MockInvitationRepositoryMockRecorder struct {
	mock *MockInvitationRepository
}

// NewMockInvitationRepository creates a new mock instance.
func NewMockInvitationRepository(ctrl *gomock.Controller) *MockInvitationRepository {
	mock := &MockInvitationRepository{ctrl: ctrl}
	mock.recorder = &MockInvitationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationRepository) EXPECT() *MockInvitationRepositoryMockRecorder {
	return m.recorder
}

// CreateInvitation mocks base method.
func (m *MockInvitationRepository) CreateInvitation(arg0 context.Context, arg1 *domain0.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockInvitationRepositoryMockRecorder) CreateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockInvitationRepository)(nil).CreateInvitation), arg0, arg1)
}

// DeleteExpiredInvitations mocks base method.
func (m *MockInvitationRepository) DeleteExpiredInvitations(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredInvitations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredInvitations indicates an expected call of DeleteExpiredInvitations.
func (mr *MockInvitationRepositoryMockRecorder) DeleteExpiredInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).DeleteExpiredInvitations), arg0, arg1)
}

// DeleteInvitation mocks base method.
func (m *MockInvitationRepository) DeleteInvitation(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockInvitationRepositoryMockRecorder) DeleteInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockInvitationRepository)(nil).DeleteInvitation), arg0, arg1)
}

// GetInvitationByCode mocks base method.
func (m *MockInvitationRepository) GetInvitationByCode(arg0 context.Context, arg1 string) (*domain0.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationByCode", arg0, arg1)
	ret0, _ := ret[0].(*domain0.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationByCode indicates an expected call of GetInvitationByCode.
func (mr *MockInvitationRepositoryMockRecorder) GetInvitationByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationByCode", reflect.TypeOf((*MockInvitationRepository)(nil).GetInvitationByCode), arg0, arg1)
}

// GetInvitationByID mocks base method.
func (m *MockInvitationRepository) GetInvitationByID(arg0 context.Context, arg1 uuid.UUID) (*domain0.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationByID", arg0, arg1)
	ret0, _ := ret[0].(*domain0.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationByID indicates an expected call of GetInvitationByID.
func (mr *MockInvitationRepositoryMockRecorder) GetInvitationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationByID", reflect.TypeOf((*MockInvitationRepository)(nil).GetInvitationByID), arg0, arg1)
}

// GetReceivedInvitations mocks base method.
func (m *MockInvitationRepository) GetReceivedInvitations(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedInvitations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedInvitations indicates an expected call of GetReceivedInvitations.
func (mr *MockInvitationRepositoryMockRecorder) GetReceivedInvitations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).GetReceivedInvitations), arg0, arg1, arg2)
}

// GetSentInvitations mocks base method.
func (m *MockInvitationRepository) GetSentInvitations(arg0 context.Context, arg1 uuid.UUID, arg2 domain.Pagination) ([]*domain0.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentInvitations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain0.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentInvitations indicates an expected call of GetSentInvitations.
func (mr *MockInvitationRepositoryMockRecorder) GetSentInvitations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).GetSentInvitations), arg0, arg1, arg2)
}

// IsValidInvitation mocks base method.
func (m *MockInvitationRepository) IsValidInvitation(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidInvitation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidInvitation indicates an expected call of IsValidInvitation.
func (mr *MockInvitationRepositoryMockRecorder) IsValidInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidInvitation", reflect.TypeOf((*MockInvitationRepository)(nil).IsValidInvitation), arg0, arg1)
}

// MarkExpiredInvitations mocks base method.
func (m *MockInvitationRepository) MarkExpiredInvitations(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkExpiredInvitations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkExpiredInvitations indicates an expected call of MarkExpiredInvitations.
func (mr *MockInvitationRepositoryMockRecorder) MarkExpiredInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkExpiredInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).MarkExpiredInvitations), arg0)
}

// UpdateInvitation mocks base method.
func (m *MockInvitationRepository) UpdateInvitation(arg0 context.Context, arg1 *domain0.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvitation indicates an expected call of UpdateInvitation.
func (mr *MockInvitationRepositoryMockRecorder) UpdateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitation", reflect.TypeOf((*MockInvitationRepository)(nil).UpdateInvitation), arg0, arg1)
}
