// Code generated by MockGen. DO NOT EDIT.
// Source: stats_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hryt430/Yotei+/internal/modules/task/domain"
)

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// GetOverdueTasksCount mocks base method.
func (m *MockStatsRepository) GetOverdueTasksCount(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueTasksCount", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueTasksCount indicates an expected call of GetOverdueTasksCount.
func (mr *MockStatsRepositoryMockRecorder) GetOverdueTasksCount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueTasksCount", reflect.TypeOf((*MockStatsRepository)(nil).GetOverdueTasksCount), ctx, userID)
}

// GetRecentCompletedTasks mocks base method.
func (m *MockStatsRepository) GetRecentCompletedTasks(ctx context.Context, userID string, limit int) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCompletedTasks", ctx, userID, limit)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCompletedTasks indicates an expected call of GetRecentCompletedTasks.
func (mr *MockStatsRepositoryMockRecorder) GetRecentCompletedTasks(ctx, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCompletedTasks", reflect.TypeOf((*MockStatsRepository)(nil).GetRecentCompletedTasks), ctx, userID, limit)
}

// GetTasksByDateRange mocks base method.
func (m *MockStatsRepository) GetTasksByDateRange(ctx context.Context, userID string, start, end time.Time) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByDateRange", ctx, userID, start, end)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByDateRange indicates an expected call of GetTasksByDateRange.
func (mr *MockStatsRepositoryMockRecorder) GetTasksByDateRange(ctx, userID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByDateRange", reflect.TypeOf((*MockStatsRepository)(nil).GetTasksByDateRange), ctx, userID, start, end)
}

// GetTasksByDueDate mocks base method.
func (m *MockStatsRepository) GetTasksByDueDate(ctx context.Context, userID string, dueDate time.Time) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByDueDate", ctx, userID, dueDate)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByDueDate indicates an expected call of GetTasksByDueDate.
func (mr *MockStatsRepositoryMockRecorder) GetTasksByDueDate(ctx, userID, dueDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByDueDate", reflect.TypeOf((*MockStatsRepository)(nil).GetTasksByDueDate), ctx, userID, dueDate)
}