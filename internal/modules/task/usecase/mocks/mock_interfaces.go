// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hryt430/Yotei+/internal/modules/task/domain"
)

// MockEventPublisher is a mock of EventPublisher interface.
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher.
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance.
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// PublishTaskAssigned mocks base method.
func (m *MockEventPublisher) PublishTaskAssigned(ctx context.Context, task *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskAssigned", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskAssigned indicates an expected call of PublishTaskAssigned.
func (mr *MockEventPublisherMockRecorder) PublishTaskAssigned(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskAssigned", reflect.TypeOf((*MockEventPublisher)(nil).PublishTaskAssigned), ctx, task)
}

// PublishTaskCompleted mocks base method.
func (m *MockEventPublisher) PublishTaskCompleted(ctx context.Context, task *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskCompleted", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskCompleted indicates an expected call of PublishTaskCompleted.
func (mr *MockEventPublisherMockRecorder) PublishTaskCompleted(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskCompleted", reflect.TypeOf((*MockEventPublisher)(nil).PublishTaskCompleted), ctx, task)
}

// PublishTaskCreated mocks base method.
func (m *MockEventPublisher) PublishTaskCreated(ctx context.Context, task *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskCreated", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskCreated indicates an expected call of PublishTaskCreated.
func (mr *MockEventPublisherMockRecorder) PublishTaskCreated(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskCreated", reflect.TypeOf((*MockEventPublisher)(nil).PublishTaskCreated), ctx, task)
}

// PublishTaskDeleted mocks base method.
func (m *MockEventPublisher) PublishTaskDeleted(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskDeleted", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskDeleted indicates an expected call of PublishTaskDeleted.
func (mr *MockEventPublisherMockRecorder) PublishTaskDeleted(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskDeleted", reflect.TypeOf((*MockEventPublisher)(nil).PublishTaskDeleted), ctx, taskID)
}

// PublishTaskUpdated mocks base method.
func (m *MockEventPublisher) PublishTaskUpdated(ctx context.Context, task *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskUpdated", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskUpdated indicates an expected call of PublishTaskUpdated.
func (mr *MockEventPublisherMockRecorder) PublishTaskUpdated(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskUpdated", reflect.TypeOf((*MockEventPublisher)(nil).PublishTaskUpdated), ctx, task)
}
